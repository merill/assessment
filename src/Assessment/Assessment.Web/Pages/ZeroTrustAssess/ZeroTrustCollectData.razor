@page "/ZeroTrustCollectData"
@inject IConfiguration Config
@inject IHttpClientFactory ClientFactory
@attribute [Authorize]
@namespace Assessment.Web
@inject IZeroTrustDataService ZeroTrustDataService

<PageTitle>Zero Trust Assessment</PageTitle>

<h1>Zero Trust Assessment - Data Collection In Progress</h1>

@if(isLoading)
{
    <p>Downloading configuration information for assessment...</p>
    <div>
        <div style="display: grid; grid-gap: 12px; grid-auto-flow: column;">
            <FluentProgressRing style="width: 102px; height: 102px;"></FluentProgressRing>+
        </div>

    </div>
}
else
{
    if(zeroTrustData == null)
    {
        <h3>An error occured. Please re-run assessment.</h3>
    }
    else
    {
        if (zeroTrustData.AppProtectionPolicy.HasAndroidPolicy)
        {
            <h3><FluentIcon Name="@FluentIcons.ShieldCheckmark" Variant=IconVariant.Filled Color="Color.Success" />Check #1: Android App Protection Policy</h3>
            <p>Android App Protection policy was not found. Create an app protection policy to protect your corporate data on unmanaged devices.</p>
        }
        else
        {
            <h3><FluentIcon Name="@FluentIcons.ShieldDismiss" Variant=IconVariant.Filled Color="Color.Error" />Check #1: Android App Protection Policy</h3>
            <p>Android App Protection policy was not found.</p>
        }

        if (zeroTrustData.AppProtectionPolicy.HasIosPolicy)
        {
            <h3><FluentIcon Name="@FluentIcons.ShieldCheckmark" Variant=IconVariant.Filled Color="Color.Success" />Check #1: iOS App Protection Policy</h3>
            <p>Android App Protection policy was not found. Create an app protection policy to protect your corporate data on unmanaged devices.</p>
        }
        else
        {
            <h3><FluentIcon Name="@FluentIcons.ShieldDismiss" Variant=IconVariant.Filled Color="Color.Error" />Check #1: iOS App Protection Policy</h3>
            <p>Android App Protection policy was found in your tenant.</p>
        }
    }
}

@code {
    private bool isLoading = true;
    private ZeroTrustData? zeroTrustData;

    protected override async Task OnInitializedAsync()
    {
        zeroTrustData = await ZeroTrustDataService.GetZeroTrustDataAsync();

        isLoading = false;
    }
}